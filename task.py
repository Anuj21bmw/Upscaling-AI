# -*- coding: utf-8 -*-
"""task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YdPgtWY6XU3D-qARDqe-icJt90jCZktT
"""

# installing reuired libraries
!pip install tensorflow opencv-python-headless

# import all libraries
import os
import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model

model_path = 'ESRGAN_4x_model/ESRGAN4x.h5'
if not os.path.exists(model_path):
    !wget https://github.com/xinntao/ESRGAN/releases/download/1.2/ESRGAN_4x_model.tar.gz
    !tar -xvzf ESRGAN_4x_model.tar.gz

# Load the pre-trained ESRGAN model
esrgan_model = load_model(model_path)

# Function for video enhancement
def enhance_video(input_path, output_path):
    cap = cv2.VideoCapture(input_path)
    width = int(cap.get(3))
    height = int(cap.get(4))
    fps = cap.get(5)

# Function for video enhancement
def enhance_video(input_path, output_path):
    cap = cv2.VideoCapture(input_path)
    width = int(cap.get(3))
    height = int(cap.get(4))
    fps = cap.get(5)

    # Define the codec and create VideoWriter object
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (width*4, height*4))

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Preprocess the frame (resize, normalize, etc.)
        preprocessed_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)  # Resize for faster processing

        # Upscale using ESRGAN
        upscaled_frame = esrgan_model.predict(np.expand_dims(preprocessed_frame, axis=0))[0]

        # Post-process the frame (denoise, etc.)
        final_frame = cv2.resize(upscaled_frame, (width*4, height*4))  # Resize back to the original size

        # Display or save the enhanced frame
        out.write(final_frame)

    cap.release()
    out.release()
    cv2.destroyAllWindows()

# Example usage
input_video_path = '/content/test1.mp4'
output_video_path = '/content/sample_data'
enhance_video(input_video_path, output_video_path)